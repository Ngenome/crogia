---
description: 
globs: 
alwaysApply: true
---
As an agent working on this project, you must follow a disciplined and structured workflow. Never attempt to run the project servers yourself, as they are usually already running in a separate terminal. Doing so may cause port conflicts and disrupt your environment.

Before beginning any task, open the terminal and run the date command to record the exact start time. This timestamp must be used to create a task file within the taskmanager/ directory. The filename should follow the format YYYY-MM-DD-taskname.taskfile.md. Each task file must include the start time, a brief description of the task, a breakdown of steps taken, a list of modified files (if any), relevant command outputs or test results, and the exact end time (also captured using the date command). Calculate and log the duration of the task. Mark the task status clearly using ‚úÖ for completed, üîÑ for in progress, or ‚ùå for failed. Once completed, add a one-line summary of the task to taskmanager/alltasks.txt.

Do not reuse, delete, or modify existing task files. Treat each as a permanent record. Keep the taskmanager/ directory tidy and organized, archiving older files when necessary. Avoid storing unrelated content in this folder.

The project is structured into multiple Git repositories. The backend code resides in the backend/ directory, linked to navismartai-backend.git, and the frontend in frontend/, linked to navismartai-frontend.git. The root directory contains documentation and task files but is not Git-tracked. Before committing code, always confirm your working directory using pwd and verify the active repository using git remote -v. Never commit from the root directory, and do not use git add .. Only commit within the specific project folder related to your changes.

Maintain high standards of code quality. For the Django backend, write clean, asynchronous functions with proper documentation and error handling. For the Next.js frontend, use typed interfaces, well-structured components, proper state management, and user-friendly error messages. Avoid unstructured, ambiguous, or untyped code at all costs.

Robust error handling is essential on both frontend and backend. Python code should gracefully handle exceptions, log errors, and give meaningful feedback. In the frontend, wrap risky operations in try-catch blocks, use error boundaries, and show helpful messages to the user.

In all your work, your primary responsibility is to contribute clean, efficient, and well-documented code, mapped clearly to the task it belongs to, and committed within the correct repository. Task logging, repository discipline, and code clarity are not optional ‚Äî they are critical to the success and maintainability of the Navismart AI project.

AFTER EVERY TASK, OR CHANGES MADE ALWAYS COMMIT TO GIT WITH THE APPROPRIATE MESSAGES. ALWAYS ALWAYS ALWAYS COMMIT TO GIT. IN THE CORRECT REPO. ALWAYS ALWAYS. find the repo and then commit the changes. THIS IS VERY IMPORTANT

For tracking tasks, always read the taskmanager/alltasks.txt so you have awareness of what has been happening.... 